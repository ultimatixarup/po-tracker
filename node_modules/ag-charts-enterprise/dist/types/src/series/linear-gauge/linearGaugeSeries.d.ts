import { type AgLinearGaugeOptions, _ModuleSupport } from 'ag-charts-community';
import { DatumUnion } from '../gauge-util/datumUnion';
import { type LinearGaugeLabelDatum, LinearGaugeLabelProperties, type LinearGaugeNodeDatum, type LinearGaugeNodeDatumIndex, LinearGaugeSeriesProperties, type LinearGaugeTargetDatum } from './linearGaugeSeriesProperties';
interface LinearGaugeNodeDataContext extends _ModuleSupport.SeriesNodeDataContext<LinearGaugeNodeDatumIndex, LinearGaugeNodeDatum, LinearGaugeLabelDatum> {
    tickData: _ModuleSupport.TickDatum[];
    targetData: LinearGaugeTargetDatum[];
    scaleData: LinearGaugeNodeDatum[];
}
export declare class LinearGaugeSeries extends _ModuleSupport.Series<LinearGaugeNodeDatumIndex, LinearGaugeNodeDatum, AgLinearGaugeOptions, LinearGaugeSeriesProperties, LinearGaugeLabelDatum, LinearGaugeNodeDataContext> {
    static readonly className = "LinearGaugeSeries";
    static readonly type: "linear-gauge";
    properties: LinearGaugeSeriesProperties;
    private seriesRect;
    private gaugeRect;
    scale: _ModuleSupport.LinearScale;
    private readonly axis;
    private readonly tickGenerator;
    get range(): [number, number];
    originX: number;
    originY: number;
    get horizontal(): boolean;
    private readonly scaleGroup;
    private readonly itemGroup;
    private readonly itemTargetGroup;
    private readonly itemTargetLabelGroup;
    private readonly itemLabelGroup;
    private readonly highlightTargetGroup;
    private readonly tickGroup;
    private scaleSelection;
    private datumSelection;
    targetSelection: _ModuleSupport.Selection<_ModuleSupport.Marker, LinearGaugeTargetDatum>;
    private targetLabelSelection;
    private labelSelection;
    private highlightTargetSelection;
    private tickSelection;
    datumUnion: DatumUnion<_ModuleSupport.Rect, LinearGaugeNodeDatum>;
    private readonly animationState;
    contextNodeData?: LinearGaugeNodeDataContext;
    constructor(moduleCtx: _ModuleSupport.ModuleContext);
    get hasData(): boolean;
    private nodeFactory;
    private markerFactory;
    processData(): void;
    formatLabel(value: number): string;
    private createLinearGradient;
    protected getShapeFillBBox(): _ModuleSupport.BBox;
    private getTargets;
    private getTargetPoint;
    private getTargetLabel;
    labelDatum(label: LinearGaugeLabelProperties, value: number): LinearGaugeLabelDatum;
    private verticalLabelInset;
    private horizontalLabelInset;
    createNodeData(): {
        itemId: string;
        nodeData: LinearGaugeNodeDatum[];
        tickData: _ModuleSupport.TickDatum[];
        targetData: LinearGaugeTargetDatum[];
        labelData: LinearGaugeLabelDatum[];
        scaleData: LinearGaugeNodeDatum[];
    };
    updateSelections(resize: boolean): void;
    private highlightDatum;
    update({ seriesRect }: {
        seriesRect?: _ModuleSupport.BBox;
    }): void;
    private updateDatumSelection;
    private updateDatumNodes;
    private updateScaleSelection;
    private updateScaleNodes;
    private updateTargetSelection;
    private updateTargetNodes;
    private updateTargetLabelSelection;
    private updateTargetLabelNodes;
    private updateTickSelection;
    private updateTickNodes;
    private updateLabelSelection;
    private updateLabelNodes;
    labelsHaveExplicitText(): boolean;
    formatLabelText(datum?: {
        label: number;
    }): void;
    protected resetAllAnimation(): void;
    resetAnimation(phase: _ModuleSupport.ChartAnimationPhase): void;
    private animateLabelText;
    animateEmptyUpdateReady(): void;
    animateWaitingUpdateReady(): void;
    protected animateReadyResize(): void;
    getSeriesDomain(): number[];
    dataCount(): number;
    getSeriesRange(_direction: _ModuleSupport.ChartAxisDirection, _visibleRange: [any, any]): [number, number];
    getLegendData(): _ModuleSupport.ChartLegendDatum<_ModuleSupport.ChartLegendType>[];
    getTooltipContent(datumIndex: LinearGaugeNodeDatumIndex): _ModuleSupport.TooltipContent | undefined;
    pickNodeClosestDatum(point: _ModuleSupport.Point): _ModuleSupport.SeriesNodePickMatch | undefined;
    pickFocus(opts: _ModuleSupport.PickFocusInputs): _ModuleSupport.PickFocusOutputs | undefined;
    getCaptionText(): string;
    getCategoryValue(_datumIndex: LinearGaugeNodeDatumIndex): void;
    datumIndexForCategoryValue(_categoryValue: any): LinearGaugeNodeDatumIndex | undefined;
    protected hasItemStylers(): boolean;
}
export {};
